/*!
 * Print button for Buttons and DataTables.
 * 2016 SpryMedia Ltd - datatables.net/license
 */
(function(factory) {

    if (typeof define === "function" && define.amd) {
        define(["jquery", "datatables.net", "datatables.net-buttons"], function(jQuery) {
            return factory(jQuery, window, document);
        });
    } else if (typeof exports === "object") {
        module.exports = function(jQuery, window) {
            jQuery = jQuery || window;
            const dataTable = (jQuery.fn.dataTable || require("datatables.net")(jQuery, window));
            require("datatables.net-buttons")(jQuery, window);
            return factory(jQuery, window, document);
        };
    } else {
        factory(jQuery, window, document);
    }
}(function(jQuery, window, document) {
    "use strict";

    let svgPrint = '<i class="bi bi-printer-fill"></i>';

    function getFullUrl(url) {
        const anchor = document.createElement("a");
        anchor.href = url;
        const host = anchor.host.indexOf("/") === -1 && anchor.pathname.indexOf("/") !== 0
            ? anchor.host + "/"
            : anchor.host;
        return anchor.protocol + "//" + host + anchor.pathname + anchor.search;
    }

    const dataTable = jQuery.fn.dataTable;

    dataTable.ext.buttons.print = {
        className: "buttons-print",
        text: function(options) {
            return options.i18n("buttons.print", svgPrint);
        },
        action: function(e, dt, button, config) {
            function createRow(cells, tagName) {
                let row = "<tr>";
                for (let i = 0; i < cells.length; i++) {
                    const content = cells[i] === null || cells[i] === undefined ? "" : cells[i];
                    const className = columnClasses[i] ? `class="${columnClasses[i]}"` : "";
                    row += `<${tagName} ${className}>${content}</${tagName}>`;
                }
                return row + "</tr>";
            }

            const exportData = dt.buttons.exportData({
                ...config.exportOptions,
                decodeEntities: false
            });
            const exportInfo = dt.buttons.exportInfo(config);
            const columnClasses = dt.columns(config.exportOptions.columns).flatten().map(function(columnIndex) {
                return dt.settings()[0].aoColumns[dt.column(columnIndex).index()].sClass;
            }).toArray();
            let tableHtml = `<table class="${dt.table().node().className}">`;

            if (config.header) {
                tableHtml += `<thead>${createRow(exportData.header, "th")}</thead>`;
            }
            tableHtml += "<tbody>";
            for (let i = 0; i < exportData.body.length; i++) {
                tableHtml += createRow(exportData.body[i], "td");
            }
            tableHtml += "</tbody>";

            if (config.footer && exportData.footer) {
                tableHtml += `<tfoot>${createRow(exportData.footer, "th")}</tfoot>`;
            }
            tableHtml += "</table>";

            const printWindow = window.open("", "");
            if (printWindow) {
                printWindow.document.close();
				let headContent = `<title>${exportInfo.title}</title>`;

                jQuery("style, link").each(function() {
                    const clonedElement = jQuery(this).clone()[0];
                    if (clonedElement.nodeName.toLowerCase() === "link") {
                        clonedElement.href = getFullUrl(clonedElement.href);
                    }
                    headContent += clonedElement.outerHTML;
                });

                try {
                    printWindow.document.head.innerHTML = headContent;
                } catch (error) {
                    jQuery(printWindow.document.head).html(headContent);
                }
                printWindow.document.body.innerHTML = `<h6>${exportInfo.title}</h6>
                    <div>${exportInfo.messageTop || ""}</div>${tableHtml}
                    <div>${exportInfo.messageBottom || ""}</div>`;
                jQuery(printWindow.document.body).addClass("dt-print-view");
                jQuery("img", printWindow.document.body).each(function(index, img) {
                    img.setAttribute("src", getFullUrl(img.getAttribute("src")));
                });
                if (config.customize) {
                    config.customize(printWindow, config, dt);
                }
                const autoPrintFunction = function() {
                    if (config.autoPrint) {
                        printWindow.print();
                        printWindow.close();
                    }
                };
                if (navigator.userAgent.match(/Trident\/\d.\d/)) {
                    autoPrintFunction();
                } else {
                    printWindow.setTimeout(autoPrintFunction, 1000);
                }
            } else {
                dt.buttons.info(
                    dt.i18n("buttons.printErrorTitle", "Unable to open print view"),
                    dt.i18n("buttons.printErrorMsg", "Please allow popups in your browser for this site to be able to view the print view."),
                    5000
                );
            }
        },
        title: "*",
        messageTop: "*",
        messageBottom: "*",
        exportOptions: {},
        header: true,
        footer: false,
        autoPrint: true,
        customize: null
    };

    return dataTable;
}));
